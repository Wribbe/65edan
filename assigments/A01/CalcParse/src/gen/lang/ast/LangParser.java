package lang.ast;

import beaver.*;
import java.util.ArrayList;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "parser.beaver".
 */
public class LangParser extends Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short ID = 1;
		static public final short LET = 2;
		static public final short NUMERAL = 3;
		static public final short MUL = 4;
		static public final short ASSIGN = 5;
		static public final short IN = 6;
		static public final short END = 7;

		static public final String[] NAMES = {
			"EOF",
			"ID",
			"LET",
			"NUMERAL",
			"MUL",
			"ASSIGN",
			"IN",
			"END"
		};
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9njaEaAmZ0GX2Szj6bjlK0Gl43yuLlwrBLU7ISXbcAxuTjCbjriDW2kc6AE51D4h3jTTAg" +
		"KIhnQ8iDYw4d4MZDHAMAHA#fyeLZPqqDb4AbgwA6EYJecwcsKdIgoki7RMfp4nftxo2xYBB" +
		"PYBtRYy9$d8Dc4ccpadcF8QSCv7hl3lGd1#E6RBpxHCpxOik5TqkeVZEOs$fUizX#v9YpyZ" +
		"0RL5xLvApC=");

	static final Action RETURN7 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 7];
		}
	};

	static public class SyntaxError extends RuntimeException { public SyntaxError(String msg) {super(msg);}}
	// Disable syntax error recovery
	protected void recoverFromError(Symbol token, TokenStream in) {
		throw new SyntaxError("Cannot recover from the syntax error");
	}

	private final Action[] actions;

	public LangParser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			Action.RETURN,	// [0] program = exp
			new Action() {	// [1] exp = factor
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			new Action() {	// [2] exp = exp MUL factor
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
				}
			},
			Action.RETURN,	// [3] factor = let
			Action.RETURN,	// [4] factor = numeral
			Action.RETURN,	// [5] factor = id
			RETURN7,	// [6] let = LET id ASSIGN exp IN exp END; returns 'END' although none is marked
			Action.RETURN,	// [7] numeral = NUMERAL
			Action.RETURN	// [8] id = ID
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
