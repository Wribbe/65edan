%class "LangParser";
%package "lang.ast";

%embed {:
	static public class SyntaxError extends RuntimeException { public SyntaxError(String msg) {super(msg);}}
	// Disable syntax error recovery
	protected void recoverFromError(Symbol token, TokenStream in) {
		throw new SyntaxError("Cannot recover from the syntax error");
	}
    public static boolean DEBUG = true;
    public static void debug(String string) {
        if (DEBUG) {
            System.out.println("[?] DEBUG: "+string);
        }
    }
:};

//%terminals ID, INT, LPAR, RPAR, LBRA, RBRA, SEMI, ASSIGN, NUM, COMMA;
%terminals ID, INT, LPAR, RPAR, LBRA, RBRA, SEMI, ASSIGN, NUM;

%typeof program = "Program";
%typeof function = "Function";
%typeof function_list = "List";
//%typeof statement_list = "List";
//%typeof function_parameter_list = "List";

%typeof id = "ID";
%typeof id_declare = "IdDeclare";
%typeof id_use = "IdUse";
%typeof literal = "Literal";

%typeof block_element = "BlockElement";
%typeof block_elements = "List";

%typeof block = "Block";

//%typeof statement = "Statement";
//%typeof assignment = "AssignStatement";



%goal program;

program = function_list.a {: return new Program(a); :}
    ;

function_list =
    function.a {:
        debug("Returning new function list.");
        return new List().add(a);
    :}
    | function_list.a function.b {:
        debug("Adding new element to function list.");
        return a.add(b);
    :}
    ;

block_element =
    id_declare
    | id_use
    ;

block_elements =
    block_element.elem {:
        debug("Returning new block_element_list.");
        return new List().add(elem);
    :}
    | block_elements.list block_element.elem{:
        debug("Adding block element to existing list.");
        return list.add(elem);
    :}
    ;

block =
    LBRA RBRA {:
        return new Block(new Opt());
    :}
    | LBRA block_elements.elements RBRA {:
        return new Block(new Opt(elements));
    :}
    ;

function =
    INT id.id LPAR RPAR block.block {:
        return new FunctionDeclaration(id, block);
    :}
    ;

id_declare =
    INT id.id SEMI {:
        debug("Returned IdDeclare(id).");
        return new IdDeclare(id);
    :}
    ;

id_use =
    id.id ASSIGN literal.num  SEMI {:
        return new IdUse(id, num);
    :}
    | id.id1 ASSIGN id.id2 SEMI {:
        return new IdUse(id1, id2);
    :}
    ;

id = ID.id {:
        debug("Returned new Id.");
        return new ID(id);
    :}
    ;

literal = NUM.num {:
        return new Literal(num);
    :}
    ;

//id_declare = ID.id {:
//        return new IdDeclaration();
//    :}
//    ;
//
//function = INT id_declare.id  LPAR function_parameter_list.par RPAR LBRA statement_list.list RBRA {:
//                debug("Returning FunctionDeclaration.");
//                return new FunctionDeclaration(id, par, list);
//           :};
//
//function_list =
//    function.a {:
//        debug("Returning new function list.");
//        return new List().add(a);
//    :}
//    | function_list.a function.b {:
//        debug("Adding new element to function list.");
//        return a.add(b);
//    :}
//    ;
//
//function_parameter_list =
//    /* epsilon */  {:
//         debug("Epsilon in function parameter list.");
//         return new Opt();
//    :}
//    | INT id_declare.id {:
//        return new List().add(id);
//    :}
//    | function_parameter_list.a COMMA INT id_declare.id {:
//        return a.add(id);
//    :}
//    ;
//
//assignment = INT id_declare.a  SEMI {:
//        return new AssignStatement(a);
//    :};
//
//use = ID ASSIGN NUM SEMI {:
//        return new UseStatement();
//    :}
//    | ID ASSIGN ID SEMI {:
//        return new UseStatement();
//    :}
//    ;
//
//statement = assignment | use;
//
//statement_list =
//    statement.a {:
//        debug("Returning new statement list.");
//        return new List().add(a);
//    :}
//    | statement_list.a statement.b {:
//        debug("Adding element "+b+" to statement list.");
//        return a.add(b);
//    :}
//    ;
