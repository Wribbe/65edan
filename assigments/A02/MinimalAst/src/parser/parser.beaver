%class "LangParser";
%package "lang.ast";

%embed {:
	static public class SyntaxError extends RuntimeException { public SyntaxError(String msg) {super(msg);}}
	// Disable syntax error recovery
	protected void recoverFromError(Symbol token, TokenStream in) {
		throw new SyntaxError("Cannot recover from the syntax error");
	}
    public static boolean DEBUG = true;
    public static void debug(String string) {
        if (DEBUG) {
            System.out.println("[?] DEBUG: "+string);
        }
    }
:};

%terminals ID, INT, LPAR, RPAR, LBRA, RBRA, SEMI, ASSIGN, NUM, COMMA;

// Operator terminals.
//%terminals PLUS;

%typeof program = "Program";
%typeof function = "Function";

%typeof id = "ID";
%typeof id_declare = "Expression";
%typeof id_use = "Expression";
%typeof literal = "Literal";

%typeof block_element = "Expression";
%typeof block_elements = "List";

%typeof block = "Block";

%typeof function_parameters = "List";

%typeof expression_list = "List";
%typeof expression = "Expression";

%typeof var = "NumVar";


%goal program;

program = expression_list.list {:
        return new Program(list);
    :}
    ;

//### Expressions.

expression_list =
    expression.exp {:
        return new List().add(exp);
    :}
    | expression_list.list expression.exp {:
        return list.add(exp);
    :}
    ;

expression =
    function
    | block_element
    ;

//### Functions.

function =
    INT id.id LPAR RPAR block.block {:
        return new FunctionDeclaration(id, new Opt(), block);
    :}
    | INT id.id LPAR function_parameters.fp RPAR block.block {:
        return new FunctionDeclaration(id, new Opt(fp), block);
    :}
    ;

function_parameters =
    INT id.id {:
        return new List().add(id);
    :}
    | function_parameters.list COMMA INT id.id {:
        return list.add(id);
    :}
    ;


//### Blocks.

block =
    LBRA RBRA {:
        return new Block(new Opt());
    :}
    | LBRA block_elements.elements RBRA {:
        return new Block(new Opt(elements));
    :}
    ;

block_elements =
    block_element.elem {:
        debug("Returning new block_element_list.");
        return new List().add(elem);
    :}
    | block_elements.list block_element.elem{:
        debug("Adding block element to existing list.");
        return list.add(elem);
    :}
    ;

block_element =
    id_declare
    | id_use
    ;


//### Declaration / Uses.

id_declare =
    INT id.id SEMI {:
        debug("Returned IdDeclare(id).");
        return new IdDeclare(id);
    :}
    ;

id_use =
    id.id ASSIGN var.v SEMI {:
        return new IdUse(id, v);
    :}
    ;


//### Basic types.

var = id | literal;

id = ID.id {:
        debug("Returned new Id.");
        return new ID(id);
    :}
    ;

literal = NUM.num {:
        return new Literal(num);
    :}
    ;
