%class "LangParser";
%package "lang.ast";

%embed {:
	static public class SyntaxError extends RuntimeException { public SyntaxError(String msg) {super(msg);}}
	// Disable syntax error recovery
	protected void recoverFromError(Symbol token, TokenStream in) {
		throw new SyntaxError("Cannot recover from the syntax error");
	}
    static public void debug(String string) {
        System.out.println("[?] DEBUG: "+string);
    }
:};

// Type terminals.
%terminals ID, NUMERAL, INT;
// Arithmetic terminals.
%terminals PLUS, MUL, ASSIGN, DIV, MINUS, REM;
// Structural terminals.
%terminals LPAR, RPAR, LBRA, RBRA, SEMI, COMMA;
// Control logic terminals.
%terminals RETURN, IF, ELSE, WHILE;
// Logical operators.
%terminals NOEQ, EQ, LTEQ, GTEQ, LT, GT;

%typeof program = "Program";

%typeof statement = "Statement";
%typeof control_flow_statement = "Statement";

%typeof expression = "Expression";
%typeof factor = "Expression";
%typeof term = "Expression";
%typeof assignable_expression = "Expression";

%typeof function_declarations = "List";
%typeof function_declaration_parameters = "List";
%typeof function_use_parameters = "List";

%typeof statements= "List";
%typeof block = "List";

%typeof function_use = "FunctionUse";

%typeof function_declaration = "FunctionDeclaration";
%typeof logic_expression = "BinaryLogicalExpression";

%typeof id_use = "IdUse";
%typeof id_declare = "IdDeclare";

%typeof else_statement = "ELSE";
%typeof return_statement = "Return";


%goal program;


program = function_declarations.functions {: return new Program(functions); :} ;


function_declarations =
    function_declaration.function {:
        return new List().add(function);
    :}
    | function_declarations.function_list function_declaration.function  {:
        return function_list.add(function);
    :}
    ;


function_declaration =
    id_declare.id LPAR function_declaration_parameters.fps RPAR LBRA return_statement.retstm RBRA {:
        return new FunctionDeclaration(id, fps, new List(), retstm);
    :}
    | id_declare.id LPAR function_declaration_parameters.fps RPAR LBRA block.block return_statement.retstm RBRA {:
        return new FunctionDeclaration(id, fps, block, retstm);
    :}
    | id_declare.id LPAR function_declaration_parameters.fps RPAR LBRA statements.stms return_statement.retstm RBRA {:
        return new FunctionDeclaration(id, fps, stms, retstm);
    :}
    ;

// Func param opt.

function_declaration_parameters =
    /* Epsilon */ {:
        return new List();
    :}
    | id_declare.id {:
        return new List().add(id);
    :}
    | function_declaration_parameters.list COMMA id_declare.id {:
        return list.add(id);
    :}
    ;


function_use =
    id_use.id LPAR function_use_parameters.funcparams RPAR {:
        return new FunctionUse(id, funcparams);
    :}
    ;


function_use_parameters =
    /* Epsilon */ {:
        return new List();
    :}
    | expression.expression {:
        return new List().add(expression);
    :}
    | function_use_parameters.list COMMA expression.expression {:
        return list.add(expression);
    :}
    ;


block =
    LBRA RBRA {:
        return new List();
    :}
    | LBRA statements.stms RBRA {:
        return stms;
    :}
    | LBRA block.block RBRA {:
        return block;
    :}
    ;


statements =
    statement.statement SEMI {:
        return new List().add(statement);
    :}
    | statements.statement_list statement.statement SEMI {:
        return statement_list.add(statement);
    :}
    | control_flow_statements
    ;


control_flow_statements =
    control_flow_statement.control {:
        return new List().add(control);
    :}
    | statements.statement_list control_flow_statement.control {:
        return statement_list.add(control);
    :}
    ;


statement =
    id_use.id ASSIGN assignable_expression.exp {:
        return new Assign(id, exp);
    :}
    | id_declare.id ASSIGN assignable_expression.exp {:
        return new VarDeclare(id, new Opt(exp));
    :}
    | id_declare.id {:
        return new VarDeclare(id, new Opt());
    :}
    | function_use.use {:
        return new FunctionStatement(use);
    :}
    | control_flow_statement
    ;


assignable_expression =
    expression
    | logic_expression
    ;


control_flow_statement =
    if_statement
    | while_statement
    | return_statement
    ;


if_statement =
    IF LPAR logic_expression.logic RPAR block.block else_statement.elsestm {:
        return new IF(logic, block, new Opt(elsestm));
    :}
    | IF LPAR logic_expression.logic RPAR block.block  {:
        return new IF(logic, block, new Opt());
    :}
    ;


else_statement =
    ELSE block.block {:
        return new ELSE(block);
    :}
    ;


while_statement =
    WHILE LPAR logic_expression.logic RPAR block.block {:
        return new WHILE(logic, block);
    :}
    ;


return_statement =
    RETURN expression.expression SEMI {:
        return new Return(expression);
    :}
    ;


logic_expression =
    expression.exp1 NOEQ expression.exp2 {:
        return new NOEQ(exp1, exp2);
    :}
    | expression.exp1 EQ expression.exp2 {:
        return new  EQ(exp1, exp2);
    :}
    | expression.exp1 LTEQ expression.exp2 {:
        return new  LTEQ(exp1, exp2);
    :}
    | expression.exp1 GTEQ expression.exp2 {:
        return new  GTEQ(exp1, exp2);
    :}
    | expression.exp1 LT expression.exp2 {:
        return new  LT(exp1, exp2);
    :}
    | expression.exp1 GT expression.exp2 {:
        return new  GT(exp1, exp2);
    :}
    ;


expression =
    term
    | expression.expression PLUS term.term {:
        return new Add(expression, term);
    :}
    | expression.expression MINUS term.term {:
        return new Minus(expression, term);
    :}
    ;


term =
    term.term MUL factor.factor {:
        return new Mul(term, factor);
    :}
    | term.term DIV factor.factor {:
        return new Div(term, factor);
    :}
    | term.term REM factor.factor {:
        return new Remainder(term, factor);
    :}
    | factor
    ;


factor =
    numeral
    | id_use
    | LPAR expression.expression RPAR {:
        return expression;
    :}
    | function_use
    ;


numeral =
    NUMERAL.num {:
        return new Numeral(num);
    :}
    ;


id_declare =
    INT ID.id {:
        return new IdDeclare(id);
    :}
    ;


id_use =
    ID.id {:
        return new IdUse(id);
    :}
    ;
