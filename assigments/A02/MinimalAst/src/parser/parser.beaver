%class "LangParser";
%package "lang.ast";

%embed {:
	static public class SyntaxError extends RuntimeException { public SyntaxError(String msg) {super(msg);}}
	// Disable syntax error recovery
	protected void recoverFromError(Symbol token, TokenStream in) {
		throw new SyntaxError("Cannot recover from the syntax error");
	}
:};

%terminals ID, NUMERAL, INT;
%terminals PLUS, MUL;
%terminals LPAR, RPAR, LBRA, RBRA;

%typeof program = "Program";

%typeof expression = "Expression";
%typeof factor = "Expression";
%typeof term = "Expression";

%typeof id_declare = "IdDeclare";

%typeof functions = "List";
%typeof expressions = "List";

%typeof function = "FunctionDeclaration";

//%typeof id_declare = "IdDeclare";

%goal program;

program = functions.functions {: return new Program(functions); :} ;

functions =
    function.function {:
        return new List().add(function);
    :}
    | functions.function_list function.function  {:
        return function_list.add(function);
    :}
    ;

function =
    id_declare.id_declare LPAR RPAR LBRA RBRA {:
        return new FunctionDeclaration(id_declare, new Opt());
    :}
    | id_declare.id_declare LPAR RPAR LBRA block.block RBRA{:
        return new FunctionDeclaration(id_declare, new Opt(block));
    :}
    ;


block =
    expressions
    ;


expressions =
    expression.expression {:
        return new List().add(expression);
    :}
    | expressions.expression_list expression.expression {:
        return expression_list.add(expression);
    :}
    ;

expression =
    term
    | expression.expression PLUS term.term {:
        return new Add(expression, term);
    :}
    ;

term =
    term.term MUL factor.factor {:
      return new Mul(term, factor);
    :}
    | factor
    ;

factor =
    numeral
    | id_use
    | LPAR expression.expression RPAR {:
      return expression;
    :}
//    | id_declare
    ;


numeral = NUMERAL.num {:
        return new Numeral(num);
    :}
    ;

id_use = ID.id {:
    return new IdUse(id);
    :}
    ;

id_declare =
    INT ID.id {:
      return new IdDeclare(id);
    :}
    ;
