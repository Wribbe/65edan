import java.util.Set;
import java.util.TreeSet;

aspect Errors {
	public class ErrorMessage implements Comparable<ErrorMessage> {
		protected final String message;
		protected final int lineNumber;
		public ErrorMessage(String message, int lineNumber) {
			this.message = message;
			this.lineNumber = lineNumber;
		}
		public int compareTo(ErrorMessage other) {
			if (lineNumber == other.lineNumber) {
				return message.compareTo(other.message);
			}
			return Integer.compare(lineNumber, other.lineNumber);
		}
		public String toString() {
			return "Error at line " + lineNumber + ": " + message;
		}
	}
	protected ErrorMessage ASTNode.error(String message) {
		return new ErrorMessage(message, getLine(getStart()));
	}

	coll Set<ErrorMessage> Program.errors() [new TreeSet<ErrorMessage>()] with add root Program;

	inh Program ASTNode.program();
	eq Program.getChild().program() = this;
}


aspect ErrorContributions {
	IdUse contributes error("symbol '" + getID() + "' is not declared")
		when declaration().isUnknown()
		to Program.errors() for program();

	IdDeclare contributes error("symbol '" + getID() + "' is already declared!")
		when isMultiplyDeclared()
		to Program.errors() for program();

    FunctionDeclaration contributes error("function declaration of '" + getIdDeclare().getID() + "' collides with predefined function with same name.")
        when collisionWithPredefined()
        to Program.errors() for program();

    WHILE contributes error("while statement needs expression of type: '" + expectedType() +"', but got expression of type: '" + getLogic().getType() + "'.")
      when !expressionTypeMatched()
      to Program.errors() for program();

    IF contributes error("if statement needs expression of type: '" + expectedType() +"', but got expression of type: '" + getLogic().getType() + "'.")
      when !expressionTypeMatched()
      to Program.errors() for program();

    FunctionUse contributes error("symbol '" + getIdUse().getID() +"' does not refer to a function.")
      when !getIdUse().isFunction()
      to Program.errors() for program();

    Assign contributes error("symbol '" + getIdUse().getID() +"' does not refer to a variable, can't assign.")
      when !getIdUse().isVariable()
      to Program.errors() for program();
}
//	IdUse contributes error("the definition of symbol '" + getID() + "' is circular")
//		when isCircular()
//		to Program.errors() for program();
//}
