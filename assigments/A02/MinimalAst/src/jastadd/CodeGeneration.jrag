
aspect CodeGeneration {

    public void Program.genCode(PrintStream out) {
        out.println(".global _start");
        out.println(".data");
        out.println(".text");
        out.println("_start:");
        out.println("call main");

        for(FunctionDeclaration declaration : getFunctionDeclarationList()) {
            declaration.genCode(out);
        }
    }

    public void FunctionDeclaration.genCode(PrintStream out) {
        out.println("# start of "+name()+" function.");
        out.println(name()+": # function label");
        getReturn().genCode(out);
    }

    public String Expression.getCode() { return ""; }

    public String Numeral.getCode() {
        return getNUMERAL();
    }

    public void Numeral.genCode(PrintStream out) {
       out.println(getCode());
    }

    public void Return.genCode(PrintStream out) {
        out.println("   # start return statement");
        out.println("   movq $"+getExpression().getCode()+", %rdi # set return code to result.");
        String functionName = enclosingFunction().name();
        if (functionName.equals("main")) {
            out.println("   movq $60, %rax # sys_exit");
        }
        out.println("   syscall");
    }
}
