import java.util.Map;
import java.util.HashMap;


aspect interpreter {

    class ActivationRecord {

        private Map<String, Integer> record;

        public ActivationRecord() {
            record = new HashMap<String, Integer>();
        }

        public void put(IdDeclare id, Integer value) {
            put(id.getID(), value);
        }

        public void put(IdUse id, Integer value) {
            put(id.getID(), value);
        }

        public void put(String key, Integer value) {
            record.put(key, value);
        }

        public Integer get(IdDeclare id) {
            return get(id.getID());
        }

        public Integer get(String id) {
            return record.get(id);
        }
    }

    public Integer Program.eval() {
        FunctionDeclaration main = function("main");
        if (!main.getIdDeclare().getID().equals("main")) {
            throw new RuntimeException("No main function declared, aborting.");
        }
        ActivationRecord programScope = new ActivationRecord();
        // Add all declared functions to the programScope.
        for (FunctionDeclaration function : getFunctionDeclarationList()) {
            programScope.put(function.getIdDeclare(), 0);
        }
        // Add predefined function  to programScope.
        for (FunctionDeclaration function : predefinedFunctions()) {
            programScope.put(function.getIdDeclare(), 0);
        }
        main.eval(programScope);
        return Statement.noReturn;
    }

    public Integer FunctionDeclaration.eval(ActivationRecord record) {

        // Create new scope for evaluation of this function.
        ActivationRecord functionScope = new ActivationRecord();

        Integer returnValue = Statement.noReturn;

        // Parse and assign any function parameters stored in the record.
        int parameterCounter = 0;
        String parameterName = "";
        String parameterStorageName = "";
        for (IdDeclare parameter : getFunctionParametersList()) {
            parameterName = parameter.getID();
            parameterStorageName = Statement.paramStoreName(parameterCounter);
            functionScope.put(parameterName, record.get(parameterStorageName));
            parameterCounter += 1;
        }

        // Evaluate all statements in the function.
        for (Statement statement : getBlockList()) {
            returnValue = statement.eval(functionScope);
            if (returnValue != Statement.noReturn) {
                return returnValue;
            }
        }

        return getReturn().eval(functionScope);
    }

    // Placeholder functions for Statement and Expression.
    public Integer Statement.eval(ActivationRecord record) { return noReturn; }
    public Integer Expression.eval(ActivationRecord record) { return 0; }

    public Integer VarDeclare.eval(ActivationRecord record) {
        if (hasExpression()) {
            record.put(getIdDeclare(), getExpression().eval(record));
        }
        return noReturn;
    }

    /** Arithmetic operators */
    /*----------------------*/

    public Integer Add.eval(ActivationRecord record) {
        Integer left = getLeft().eval(record);
        Integer right = getRight().eval(record);
        return left+right;
    }

    public Integer Minus.eval(ActivationRecord record) {
        Integer left = getLeft().eval(record);
        Integer right = getRight().eval(record);
        return left-right;
    }

    public Integer Mul.eval(ActivationRecord record) {
        Integer left = getLeft().eval(record);
        Integer right = getRight().eval(record);
        return left*right;
    }

    public Integer Div.eval(ActivationRecord record) {
        Integer left = getLeft().eval(record);
        Integer right = getRight().eval(record);
        return left/right;
    }

    public Integer Remainder.eval(ActivationRecord record) {
        Integer left = getLeft().eval(record);
        Integer right = getRight().eval(record);
        return left%right;
    }

    /** Base types */
    /*-------------*/

    public Integer Numeral.eval(ActivationRecord record) {
        return Integer.parseInt(getNUMERAL());
    }

    /** Function usage */
    /*-----------------*/

    public Integer FunctionStatement.eval(ActivationRecord record) {
        return getFunctionUse().eval(record);
    }

    protected static final String Statement.parameterPrefix = "__functionParameter";

    public static String Statement.paramStoreName(int i) {
        return parameterPrefix+i;
    }

    public Integer FunctionUse.eval(ActivationRecord record) {
        String functionName = getIdUse().getID();
        if (functionName.equals("print")) {
            System.out.println(getExpression(0).eval(record));
            return Statement.noReturn;
        }

        ActivationRecord functionScope = new ActivationRecord();

        // Parse and store the function parameters in new scope.
        int counter = 0;
        for (Expression expression : getExpressionList()) {
            functionScope.put(Statement.parameterPrefix+counter,
                              expression.eval(record));
            counter += 1;
        }

        // Get hold of the correct FunctionDeclaration and evaluate it.
        FunctionDeclaration currentFunction = function(functionName);
        return currentFunction.eval(functionScope);
    }

    /** Variables */
    /*------------*/

    public Integer Assign.eval(ActivationRecord record) {
        record.put(getIdUse().getID(), getExpression().eval(record));
        return noReturn;
    }

    public Integer IdUse.eval(ActivationRecord record) {
        String id = getID();
        Integer result = record.get(id);
        if (result == null) {
            throw new RuntimeException("value '"+ id +"' is not initialized.");
        }
        return result;
    }

    /** Boolean operators */
    /*----------------------*/

    public final static int Expression.TRUE = 1;
    public final static int Expression.FALSE = 0;

    public Integer NOEQ.eval(ActivationRecord record) {
        Integer left = getLeft().eval(record);
        Integer right = getRight().eval(record);
        return left != right ? TRUE : FALSE;
    }

    public Integer EQ.eval(ActivationRecord record) {
        Integer left = getLeft().eval(record);
        Integer right = getRight().eval(record);
        return left == right ? TRUE : FALSE;
    }

    public Integer LTEQ.eval(ActivationRecord record) {
        Integer left = getLeft().eval(record);
        Integer right = getRight().eval(record);
        return left <= right ? TRUE : FALSE;
    }

    public Integer GTEQ.eval(ActivationRecord record) {
        Integer left = getLeft().eval(record);
        Integer right = getRight().eval(record);
        return left >= right ? TRUE : FALSE;
    }

    public Integer LT.eval(ActivationRecord record) {
        Integer left = getLeft().eval(record);
        Integer right = getRight().eval(record);
        return left < right ? TRUE : FALSE;
    }

    public Integer GT.eval(ActivationRecord record) {
        Integer left = getLeft().eval(record);
        Integer right = getRight().eval(record);
        return left > right ? TRUE : FALSE;
    }

    /** IF/ELSE/WHILE */
    /*----------------*/

    public static final Integer Statement.noReturn = new Integer(100);

    public Integer IF.eval(ActivationRecord record) {

        Integer returnValue = noReturn;

        int logicResult = getLogic().eval(record);
        if (logicResult == getLogic().TRUE) {
            for (Statement statement : getBlockList()) {
                returnValue = statement.eval(record);
                if (returnValue != noReturn) {
                    return returnValue;
                }
            }
        } else {
            if (hasELSE()) {
                for (Statement statement : getELSE().getBlockList()) {
                    returnValue = statement.eval(record);
                    if (returnValue != noReturn) {
                        return returnValue;
                    }
                }
            }
        }
        return noReturn;
    }

    public Integer WHILE.eval(ActivationRecord record) {

        int logicResult = getLogic().eval(record);

        Integer returnValue = noReturn;

        while (logicResult == getLogic().TRUE) {
            for (Statement statement : getBlockList()) {
                returnValue = statement.eval(record);
                if (returnValue != noReturn) {
                    return returnValue;
                }
            }
            logicResult = getLogic().eval(record);
        }
        return noReturn;
    }

    /** Return */
    /*---------*/

    public Integer Return.eval(ActivationRecord record) {
        return getExpression().eval(record);
    }
}
