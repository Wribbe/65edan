import java.util.Map;
import java.util.HashMap;

aspect interpreter {

    class ActivationRecord {

        private Map<String, Integer> record = new HashMap<String, Integer>();

        public void put(IdDeclare id, int value) {
            record.put(id.getID(), value);
        }

        public void put(IdDeclare id) {
            record.put(id.getID(), null);
        }
    }

    public void Program.eval() {
        FunctionDeclaration main = function("main");
        if (!main.getIdDeclare().getID().equals("main")) {
            throw new RuntimeException("No main function declared, aborting.");
        }
        main.eval(new ActivationRecord());
    }

    public int FunctionDeclaration.eval(ActivationRecord record) {
        // Evaluate all statements in the function.
        for (Statement statement : getBlockList()) {
            statement.eval(record);
        }
        return getReturn().getExpression().eval(record);
    }

    // Placeholder functions for Statement and Expression.
    public void Statement.eval(ActivationRecord record) {}
    public int Expression.eval(ActivationRecord record) { return 0; }

    public void VarDeclare.eval(ActivationRecord record) {
        if (!hasExpression()) {
            record.put(getIdDeclare());
        } else {
            record.put(getIdDeclare(), getExpression().eval(record));
        }
    }

    /** Arithetic operators */
    /*----------------------*/

    public int Add.eval(ActivationRecord record) {
        int left = getLeft().eval(record);
        int right = getRight().eval(record);
        return left+right;
    }

    public int Minus.eval(ActivationRecord record) {
        int left = getLeft().eval(record);
        int right = getRight().eval(record);
        return left-right;
    }

    public int Mul.eval(ActivationRecord record) {
        int left = getLeft().eval(record);
        int right = getRight().eval(record);
        return left*right;
    }

    public int Div.eval(ActivationRecord record) {
        int left = getLeft().eval(record);
        int right = getRight().eval(record);
        return left/right;
    }

    public int Remainder.eval(ActivationRecord record) {
        int left = getLeft().eval(record);
        int right = getRight().eval(record);
        return left%right;
    }

    /** Base types */
    /*-------------*/

    public int Numeral.eval(ActivationRecord record) {
        return Integer.parseInt(getNUMERAL());
    }

    /** Function usage */
    /*-----------------*/

    public void FunctionStatement.eval(ActivationRecord record) {
        getFunctionUse().eval(record);
    }

    public int FunctionUse.eval(ActivationRecord record) {
        String functionName = getIdUse().getID();
        if (functionName.equals("print")) {
            System.out.println(getExpression(0).eval(record));
            return 0;
        }
        return 0;
    }
}
