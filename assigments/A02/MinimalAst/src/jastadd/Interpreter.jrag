import java.util.Map;
import java.util.HashMap;


aspect interpreter {

    class ActivationRecord {

        private Map<String, Integer> record;
        private ActivationRecord tail;

        public ActivationRecord() {
            record = new HashMap<String, Integer>();
            tail = this;
        }


        public void put(IdDeclare id, int value) {
            record.put(id.getID(), value);
        }

        public void put(IdUse id, int value) {
            record.put(id.getID(), value);
        }

        public void put(String id, int value) {
            record.put(id, value);
        }

        public Integer get(IdDeclare id) {
            return getIteration(id.getID());
        }

        public Integer get(String id) {
            return getIteration(id);
        }

        private Integer getIteration(String key) {
            ActivationRecord current = this;
            ActivationRecord previous;
            while(true) {
                if (current.record.containsKey(key)) {
                    return current.record.get(key);
                }
                previous = this;
                current = tail;
                if (current == previous) { // BOTTOM
                    return null;
                }
            }
        }

        public boolean has(String key) {
            return hasIteration(key);
        }

        private boolean hasIteration(String key) {
            ActivationRecord current = this;
            ActivationRecord previous;
            while(true) {
                if (current.record.containsKey(key)) {
                    return true;
                }
                previous = this;
                current = tail;
                if (current == previous) { // BOTTOM
                    return false;
                }
            }
        }

        public ActivationRecord next() {
            ActivationRecord newScope = new ActivationRecord();
            tail = this;
            return newScope;
        }
    }

    public void Program.eval() {
        FunctionDeclaration main = function("main");
        if (!main.getIdDeclare().getID().equals("main")) {
            throw new RuntimeException("No main function declared, aborting.");
        }
        ActivationRecord programScope = new ActivationRecord();
        // Add all declared functions to the programScope.
        for (FunctionDeclaration function : getFunctionDeclarationList()) {
            programScope.put(function.getIdDeclare(), 0);
        }
        // Add predefined function  to programScope.
        for (FunctionDeclaration function : predefinedFunctions()) {
            programScope.put(function.getIdDeclare(), 0);
        }
        main.eval(programScope);
    }

    public Integer FunctionDeclaration.eval(ActivationRecord record) {
        ActivationRecord functionScope = record.next();
        // Evaluate all statements in the function.
        for (Statement statement : getBlockList()) {
            statement.eval(functionScope);
        }
        return getReturn().getExpression().eval(functionScope);
    }

    // Placeholder functions for Statement and Expression.
    public void Statement.eval(ActivationRecord record) {}
    public Integer Expression.eval(ActivationRecord record) { return 0; }

    public void VarDeclare.eval(ActivationRecord record) {
        if (hasExpression()) {
            record.put(getIdDeclare(), getExpression().eval(record));
        }
    }

    /** Arithetic operators */
    /*----------------------*/

    public Integer Add.eval(ActivationRecord record) {
        Integer left = getLeft().eval(record);
        Integer right = getRight().eval(record);
        return left+right;
    }

    public Integer Minus.eval(ActivationRecord record) {
        Integer left = getLeft().eval(record);
        Integer right = getRight().eval(record);
        return left-right;
    }

    public Integer Mul.eval(ActivationRecord record) {
        Integer left = getLeft().eval(record);
        Integer right = getRight().eval(record);
        return left*right;
    }

    public Integer Div.eval(ActivationRecord record) {
        Integer left = getLeft().eval(record);
        Integer right = getRight().eval(record);
        return left/right;
    }

    public Integer Remainder.eval(ActivationRecord record) {
        Integer left = getLeft().eval(record);
        Integer right = getRight().eval(record);
        return left%right;
    }

    /** Base types */
    /*-------------*/

    public Integer Numeral.eval(ActivationRecord record) {
        return Integer.parseInt(getNUMERAL());
    }

    /** Function usage */
    /*-----------------*/

    public void FunctionStatement.eval(ActivationRecord record) {
        getFunctionUse().eval(record);
    }

    public Integer FunctionUse.eval(ActivationRecord record) {
        String functionName = getIdUse().getID();
        if (functionName.equals("print")) {
            System.out.println(getExpression(0).eval(record));
            return 0;
        }
        return 0;
    }

    /** Variables */
    /*------------*/

    public void Assign.eval(ActivationRecord record) {
        record.put(getIdUse(), getExpression().eval(record));
    }

    public Integer IdUse.eval(ActivationRecord record) {
        String id = getID();
        if (record.has(id)) {
            return record.get(id);
        }
        throw new RuntimeException("value '"+ id +"' is not initialized.");
    }

    /** Boolean operators */
    /*----------------------*/

    public final static int Expression.TRUE = 1;
    public final static int Expression.FALSE = 0;

    public Integer NOEQ.eval(ActivationRecord record) {
        Integer left = getLeft().eval(record);
        Integer right = getRight().eval(record);
        return left != right ? TRUE : FALSE;
    }

    public Integer EQ.eval(ActivationRecord record) {
        Integer left = getLeft().eval(record);
        Integer right = getRight().eval(record);
        return left == right ? TRUE : FALSE;
    }

    public Integer LTEQ.eval(ActivationRecord record) {
        Integer left = getLeft().eval(record);
        Integer right = getRight().eval(record);
        return left <= right ? TRUE : FALSE;
    }

    public Integer GTEQ.eval(ActivationRecord record) {
        Integer left = getLeft().eval(record);
        Integer right = getRight().eval(record);
        return left >= right ? TRUE : FALSE;
    }

    public Integer LT.eval(ActivationRecord record) {
        Integer left = getLeft().eval(record);
        Integer right = getRight().eval(record);
        return left < right ? TRUE : FALSE;
    }

    public Integer GT.eval(ActivationRecord record) {
        Integer left = getLeft().eval(record);
        Integer right = getRight().eval(record);
        return left > right ? TRUE : FALSE;
    }

    /** IF/ELSE/WHILE */
    /*-----------*/

    public void IF.eval(ActivationRecord record) {
        int logicResult = getLogic().eval(record);
        if (logicResult == getLogic().TRUE) {
            ActivationRecord ifScope = record.next();
            for (Statement statement : getBlockList()) {
                statement.eval(ifScope);
            }
        } else {
            if (hasELSE()) {
                ActivationRecord elseScope = record.next();
                for (Statement statement : getELSE().getBlockList()) {
                    statement.eval(elseScope);
                }
            }
        }
    }
}
