Program ::= FunctionDeclaration*;

abstract Expression;
abstract Statement;

BinaryExpression : Expression ::= Left:Expression Right:Expression;

Add : BinaryExpression;
Mul : BinaryExpression;
Div : BinaryExpression;
Minus : BinaryExpression;
Remainder : BinaryExpression;

FunctionDeclaration ::= IdDeclare FunctionParameters:IdDeclare* Block:Statement* Return;

FunctionStatement : Statement ::= FunctionUse;
FunctionUse : Expression ::= IdUse Variables:Expression*;

Assign : Statement ::= ID:IdUse Value:Expression;
Return : Statement ::= Expression;

IF : Statement ::= Logic:BinaryLogicalExpression Block:Statement* [ELSE];
WHILE : Statement ::= Logic:BinaryLogicalExpression Block:Statement*;
ELSE: Statement ::= Block:Statement*;

BinaryLogicalExpression : BinaryExpression;

NOEQ : BinaryLogicalExpression;
EQ : BinaryLogicalExpression;
LTEQ : BinaryLogicalExpression;
GTEQ : BinaryLogicalExpression;
LT : BinaryLogicalExpression;
GT : BinaryLogicalExpression;

IdUse : Expression ::= <ID>;
IdDeclare : Statement ::= <ID>;
VarDeclare : Statement ::= IdDeclare [Expression];

Numeral : Expression ::= <NUMERAL>;
