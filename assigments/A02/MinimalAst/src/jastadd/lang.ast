Program ::= FunctionDeclaration*;

abstract Expression;
Expressions ::= Expression*;

BinaryExpression : Expression ::= Left:Expression Right:Expression;

Add : BinaryExpression;
Mul : BinaryExpression;

FunctionDeclaration ::= IdDeclare [FunctionParameters:List] [Block:Expressions];
FunctionUse : Expression ::= IdUse [FunctionParameters:List];

Assign : Expression ::= ID:IdExpression Value:Expression;
Return : Expression ::= Expression;

abstract LogicExpression;
ControlFlowExpression : Expression;
IF : ControlFlowExpression ::= Logic:LogicExpression [Block:Expressions] [ControlFlowExpression];
WHILE : ControlFlowExpression ::= Logic:LogicExpression [Block:Expressions];
ELSE: ControlFlowExpression ::= [Block:Expressions];

NOEQ : LogicExpression ::= ID:Expression Expression;
EQ : LogicExpression ::= ID:Expression Expression;
LTEQ  : LogicExpression ::= ID:Expression Expression;
GTEQ  : LogicExpression ::= ID:Expression Expression;
LT : LogicExpression ::= ID:Expression Expression;
GT : LogicExpression ::= ID:Expression Expression;

IdExpression : Expression;
IdUse : IdExpression ::= <ID>;
IdDeclare : IdExpression ::= <ID>;

Numeral : Expression ::= <NUMERAL>;
