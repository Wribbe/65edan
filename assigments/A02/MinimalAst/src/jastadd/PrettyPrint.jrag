import java.io.PrintStream;

aspect PrettyPrint  {

    public void ASTNode.prettyPrint(PrintStream out) {
        prettyPrint(out, "");
        out.println();
    }

    public void ASTNode.prettyPrint(PrintStream out, String indent) {
        for (int i=0; i<getNumChild(); i++) {
            getChild(i).prettyPrint(out, indent);
        }
    }

    public void Add.prettyPrint(PrintStream out, String indent) {
        getLeft().prettyPrint(out, indent);
        out.print(" + ");
        getRight().prettyPrint(out, indent);
    }

    public void Assign.prettyPrint(PrintStream out, String indent) {
        out.print(indent+"");
        out.print(getIdUse().getID());
        out.print(" = ");
        getExpression().prettyPrint(out, indent+"  ");
        out.print(";");
        out.println("");
    }

    public void Div.prettyPrint(PrintStream out, String indent) {
        getLeft().prettyPrint(out, indent);
        out.print(" / ");
        getRight().prettyPrint(out, indent);
    }

    public void ELSE.prettyPrint(PrintStream out, String indent) {
        out.print(" ");
        out.print("else");
        out.print(" ");
        out.print("{");
        for (int i=0; i<getNumBlock(); i++) {
            out.println("");
            getBlock(i).prettyPrint(out, indent);
            out.println("");
        }
    }

    public void EQ.prettyPrint(PrintStream out, String indent) {
        getLeft().prettyPrint(out, indent);
        out.print(" == ");
        getRight().prettyPrint(out, indent);
    }

    public void FunctionDeclaration.prettyPrint(PrintStream out, String indent) {
        out.print(indent+"int");
        out.print(" ");
        out.print(getIdDeclare().getID());
        out.print("(");
        int iMax = getNumFunctionParameters();
        for (int i=0; i<iMax; i++) {
            out.print("int");
            out.print(" ");
            getFunctionParameters(i).prettyPrint(out, indent+"  ");
            if (iMax > 1 && i < (iMax - 1)) {
                out.print(", ");
            }
        }
        out.print(")");
        out.print(" ");
        out.println("{");
        for (int i=0; i<getNumBlock(); i++) {
            getBlock(i).prettyPrint(out, indent+"  ");
        }
        getReturn().prettyPrint(out, indent+"  ");
        out.println("");
        out.print(indent+"}");
    }

    public void FunctionStatement.prettyPrint(PrintStream out, String indent) {
        out.print(indent+"");
        getFunctionUse().prettyPrint(out, "");
        out.print(";");
        out.println("");
    }

    public void FunctionUse.prettyPrint(PrintStream out, String indent) {
        out.print(getIdUse().getID());
        out.print("(");
        for (int i=0; i<getNumExpression(); i++) {
            getExpression(i).prettyPrint(out, "");
        }
        out.print(")");
    }

    public void GT.prettyPrint(PrintStream out, String indent) {
        getLeft().prettyPrint(out, indent);
        out.print(" > ");
        getRight().prettyPrint(out, indent);
    }

    public void GTEQ.prettyPrint(PrintStream out, String indent) {
        getLeft().prettyPrint(out, indent);
        out.print(" >= ");
        getRight().prettyPrint(out, indent);
    }

    public void IF.prettyPrint(PrintStream out, String indent) {
        out.print(indent+"if");
        out.print(" ");
        out.print("(");
        getLogic().prettyPrint(out, "");
        out.print(")");
        out.print(" ");
        out.print("{");
        for (int i=0; i<getNumBlock(); i++) {
            out.println("");
            getBlock(i).prettyPrint(out, indent+"  ");
            out.println("");
        }
        out.print(indent+"}");
        if (hasELSE())
        {
            getELSE().prettyPrint(out, indent+"  ");
            out.print(indent+"}");
        }
        out.println("");
    }

    public void IdDeclare.prettyPrint(PrintStream out, String indent) {
        out.print(getID());
    }

    public void IdUse.prettyPrint(PrintStream out, String indent) {
        out.print(getID());
    }

    public void LT.prettyPrint(PrintStream out, String indent) {
        getLeft().prettyPrint(out, indent);
        out.print(" < ");
        getRight().prettyPrint(out, indent);
    }

    public void LTEQ.prettyPrint(PrintStream out, String indent) {
        getLeft().prettyPrint(out, indent);
        out.print(" <= ");
        getRight().prettyPrint(out, indent);
    }

    public void Minus.prettyPrint(PrintStream out, String indent) {
        getLeft().prettyPrint(out, indent);
        out.print(" - ");
        getRight().prettyPrint(out, indent);
    }

    public void Mul.prettyPrint(PrintStream out, String indent) {
        getLeft().prettyPrint(out, indent);
        out.print(" * ");
        getRight().prettyPrint(out, indent);
    }

    public void NOEQ.prettyPrint(PrintStream out, String indent) {
        getLeft().prettyPrint(out, indent);
        out.print(" != ");
        getRight().prettyPrint(out, indent);
    }

    public void Numeral.prettyPrint(PrintStream out, String indent) {
        out.print(getNUMERAL());
    }

    public void Remainder.prettyPrint(PrintStream out, String indent) {
        getLeft().prettyPrint(out, indent);
        out.print(" % ");
        getRight().prettyPrint(out, indent);
    }

    public void Return.prettyPrint(PrintStream out, String indent) {
        out.print(indent+"return");
        out.print(" ");
        getExpression().prettyPrint(out, indent+"  ");
        out.print(";");
    }

    public void VarDeclare.prettyPrint(PrintStream out, String indent) {
        out.print(indent+"int");
        out.print(" ");
        out.print(getIdDeclare().getID());
        if (hasExpression()) {
            out.print(" = ");
            getExpression().prettyPrint(out, indent+"  ");
        }
        out.print(";");
        out.println("");
    }

    public void WHILE.prettyPrint(PrintStream out, String indent) {
        out.print("WHILE");
    }

}
