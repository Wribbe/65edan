import java.io.PrintStream;

aspect PrettyPrint  {

    public void ASTNode.prettyPrint(PrintStream out) {
        prettyPrint(out, "");
        out.println();
    }

    public void ASTNode.prettyPrint(PrintStream out, String indent) {
        for (int i=0; i<getNumChild(); i++) {
            getChild(i).prettyPrint(out, indent);
        }
    }

    public void Opt.prettyPrint(PrintStream out, String indent) {
        out.print("Opt");
    }

    public void Add.prettyPrint(PrintStream out, String indent) {
        getLeft().prettyPrint(out, indent);
        out.print(" + ");
        getRight().prettyPrint(out, indent);
    }

    public void Mul.prettyPrint(PrintStream out, String indent) {
        getLeft().prettyPrint(out, indent);
        out.print(" * ");
        getRight().prettyPrint(out, indent);
    }

    public void Div.prettyPrint(PrintStream out, String indent) {
        getLeft().prettyPrint(out, indent);
        out.print(" / ");
        getRight().prettyPrint(out, indent);
    }

    public void Minus.prettyPrint(PrintStream out, String indent) {
        getLeft().prettyPrint(out, indent);
        out.print(" - ");
        getRight().prettyPrint(out, indent);
    }

    public void Remainder.prettyPrint(PrintStream out, String indent) {
        getLeft().prettyPrint(out, indent);
        out.print(" % ");
        getRight().prettyPrint(out, indent);
    }

    public void FunctionDeclaration.prettyPrint(PrintStream out, String indent) {
        out.print(indent+"int");
        out.print(" ");
        out.print(getIdDeclare().getID());
        out.print("(");
        int iMax = getNumFunctionParameters();
        for (int i=0; i<iMax; i++) {
            out.print("int");
            out.print(" ");
            getFunctionParameters(i).prettyPrint(out, indent+"  ");
            if (iMax > 1 && i < (iMax - 1)) {
                out.print(", ");
            }
        }
        out.print(")");
        out.print(" ");
        out.println("{");
        for (int i=0; i<getNumBlock(); i++) {
            getBlock(i).prettyPrint(out, indent+"  ");
        }
        getReturn().prettyPrint(out, indent+"  ");
        out.println("");
        out.print(indent+"}");
    }

    public void FunctionUse.prettyPrint(PrintStream out, String indent) {
        out.print("FunctionUse");
    }

    public void Assign.prettyPrint(PrintStream out, String indent) {
        out.print("Assign");
    }

    public void Return.prettyPrint(PrintStream out, String indent) {
        out.print(indent+"return");
        out.print(" ");
        getExpression().prettyPrint(out, indent+"  ");
        out.print(";");
    }

    public void BinaryLogicalExpression.prettyPrint(PrintStream out, String indent) {
        out.print("BinaryLogicalExpression");
    }

    public void IF.prettyPrint(PrintStream out, String indent) {
        out.print("IF");
    }

    public void WHILE.prettyPrint(PrintStream out, String indent) {
        out.print("WHILE");
    }

    public void ELSE.prettyPrint(PrintStream out, String indent) {
        out.print("ELSE");
    }

    public void NOEQ.prettyPrint(PrintStream out, String indent) {
        out.print("NOEQ");
    }

    public void EQ.prettyPrint(PrintStream out, String indent) {
        out.print("EQ");
    }

    public void LTEQ.prettyPrint(PrintStream out, String indent) {
        out.print("LTEQ");
    }

    public void GTEQ.prettyPrint(PrintStream out, String indent) {
        out.print("GTEQ");
    }

    public void LT.prettyPrint(PrintStream out, String indent) {
        out.print("LT");
    }

    public void GT.prettyPrint(PrintStream out, String indent) {
        out.print("GT");
    }

    public void IdUse.prettyPrint(PrintStream out, String indent) {
        out.print(getID());
    }

    public void IdDeclare.prettyPrint(PrintStream out, String indent) {
        out.print(getID());
    }

    public void VarDeclare.prettyPrint(PrintStream out, String indent) {
        out.print(indent+"int");
        out.print(" ");
        out.print(getIdDeclare().getID());
        if (hasExpression()) {
            out.print(" = ");
            getExpression().prettyPrint(out, indent+"  ");
        }
        out.print(";");
        out.println("");
    }

    public void Numeral.prettyPrint(PrintStream out, String indent) {
        out.print(getNUMERAL());
    }

}
