1.1.)

  The accept method in ASTNode is useful for when a new node-type is created
  but the accept method is forgotten.


  Expr is an abstract class and all its concrete implementations define their
  own visit function.


  If the accept methods could not be generated through aspects all changes to
  them would be erased as soon as the code is re-generated.


  Since there is a accept method for the Program node, it can be used as
  follows:

    Program program = (Program) parse(file);
    visit(project, "data")

  And then check if the isInteractive boolean is true.


  Could also be solved by iterating over the tree and check the node types?


  The CheckInteractiveVisitor will not traverse the child nodes of the Ask
  node.


  If the goal is to count the occurrences of Ask-nodes, the isInteractive
  boolean can be changed to a integer that is incremented in the visit method.


1.2.)

  Pretty-printing a Program object with the name 'program' to the standard
  output is done by the following call:

    program.prettyPrint(System.out);


1.3.)

  Either store the type together with the String, or keep a separate
  'type-table' for each symbol to keep track of their type.


  Calling a Program object and make it print to standard error would be:

    program.checkNames(System.err);


  The push operation creates a new SymbolTable object and appends the current
  table to the 'tail' variable. The lookup function first checks the local
  context and if nothing is found, recursively the tail(s) of the current
  symbol table.

  No pop operation is needed. Since if the current SymbolTable object switches
  to the SymbolTable tail, the reference to the current SymbolTable is lost and
  will be cleaned up by the garbage collector.


2.1.)

  Could add a method that manipulates a shared global variable or parameter
  inside of each relevant AST class, but that would be inflexible.

  Using a state variable inside the TraversingVisitor is enough when running a
  single instance of the class. If multiple Traversing visitors are used, using
  the return variable would be more flexible.


  A typed return value would enable compile-time type-checking. It would also
  remove the need for casting the returned Objects.
